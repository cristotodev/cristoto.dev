---
interface BreadcrumbItem {
	label: string;
	url?: string;
}

interface Props {
	items: BreadcrumbItem[];
}

const { items } = Astro.props;

const structuredData = {
	"@context": "https://schema.org",
	"@type": "BreadcrumbList",
	"itemListElement": items.map((item, index) => ({
		"@type": "ListItem",
		"position": index + 1,
		"name": item.label,
		...(item.url && { "item": item.url })
	}))
};
---

<script type="application/ld+json" set:html={JSON.stringify(structuredData, null, 0)} />

<nav aria-label="Breadcrumb" class="mb-6">
	<ol class="flex items-center space-x-2 text-sm text-textColor/70">
		{items.map((item, index) => (
			<li class="flex items-center">
				{index > 0 && (
					<svg
						class="w-4 h-4 mx-2"
						fill="currentColor"
						viewBox="0 0 20 20"
						xmlns="http://www.w3.org/2000/svg"
					>
						<path
							fill-rule="evenodd"
							d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
							clip-rule="evenodd"
						/>
					</svg>
				)}
				{item.url ? (
					<a
						href={item.url}
						class="hover:text-accent-base transition-colors"
						{...(index === items.length - 1 && { "aria-current": "page" })}
					>
						{item.label}
					</a>
				) : (
					<span class="text-textColor" aria-current="page">
						{item.label}
					</span>
				)}
			</li>
		))}
	</ol>
</nav>