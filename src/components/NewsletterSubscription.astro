---
import { Icon } from "astro-icon/components";
---

<newsletter-subscription class="bg-color-100 rounded-lg p-6 my-8">
	<div class="max-w-md mx-auto text-center">
		<div class="mb-4">
			<Icon 
				class="h-12 w-12 mx-auto mb-3 text-accent-two" 
				name="hugeicons:mail-01" 
				aria-hidden="true"
			/>
			<h3 class="text-xl font-semibold text-textColor mb-2">
				¡Únete a mi newsletter!
			</h3>
			<p class="text-light text-sm">
				Recibe contenido técnico exclusivo y las últimas novedades del blog directamente en tu bandeja de entrada.
			</p>
		</div>

		<form id="newsletter-form" class="space-y-4">
			<div class="relative">
				<input
					type="email"
					id="email"
					name="email"
					required
					placeholder="tu.email@ejemplo.com"
					class="w-full px-4 py-3 pr-12 bg-bgColor border border-color-400 rounded-lg text-textColor placeholder-light focus:outline-none focus:ring-2 focus:ring-accent-two focus:border-transparent transition-colors"
				/>
				<Icon 
					class="absolute right-3 top-3 h-6 w-6 text-light pointer-events-none" 
					name="hugeicons:mail-01" 
					aria-hidden="true"
				/>
			</div>

			<label class="flex items-start gap-3 text-sm cursor-pointer">
				<input
					type="checkbox"
					id="terms"
					name="terms"
					required
					class="mt-0.5 h-4 w-4 text-accent-two border-color-400 rounded focus:ring-accent-two focus:ring-2"
				/>
				<span class="text-light leading-5">
					Acepto la 
					<a href="/privacy/" class="text-accent-two hover:underline">política de privacidad</a> 
					y el tratamiento de mis datos para el envío de información por correo electrónico.
				</span>
			</label>

			<button
				type="submit"
				class="w-full bg-accent-base hover:bg-accent-two text-bgColor font-medium py-3 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
			>
				<span id="submit-text">Suscribirme</span>
				<Icon 
					id="submit-icon" 
					class="h-5 w-5" 
					name="hugeicons:arrow-right-02" 
					aria-hidden="true"
				/>
			</button>
		</form>

		<div id="form-message" class="mt-4 text-sm text-center hidden">
			<div id="success-message" class="text-green-600 hidden">
				<Icon class="h-5 w-5 inline mr-2" name="hugeicons:checkmark-circle-02" />
				¡Email de confirmación enviado! Revisa tu bandeja de entrada y haz clic en el enlace para completar tu suscripción.
			</div>
			<div id="error-message" class="text-red-600 hidden">
				<Icon class="h-5 w-5 inline mr-2" name="hugeicons:alert-circle" />
				<span id="error-text">Ha ocurrido un error. Por favor, inténtalo de nuevo.</span>
			</div>
		</div>
	</div>
</newsletter-subscription>

<script>
	class NewsletterSubscription extends HTMLElement {
		private form: HTMLFormElement;
		private emailInput: HTMLInputElement;
		private termsInput: HTMLInputElement;
		private submitButton: HTMLButtonElement;
		private submitText: HTMLSpanElement;
		private submitIcon: HTMLElement;
		private formMessage: HTMLDivElement;
		private successMessage: HTMLDivElement;
		private errorMessage: HTMLDivElement;
		private errorText: HTMLSpanElement;

		constructor() {
			super();
			
			this.form = this.querySelector('#newsletter-form')!;
			this.emailInput = this.querySelector('#email')!;
			this.termsInput = this.querySelector('#terms')!;
			this.submitButton = this.querySelector('button[type="submit"]')!;
			this.submitText = this.querySelector('#submit-text')!;
			this.submitIcon = this.querySelector('#submit-icon')!;
			this.formMessage = this.querySelector('#form-message')!;
			this.successMessage = this.querySelector('#success-message')!;
			this.errorMessage = this.querySelector('#error-message')!;
			this.errorText = this.querySelector('#error-text')!;

			this.form.addEventListener('submit', this.handleSubmit.bind(this));
		}

		private async handleSubmit(event: Event) {
			event.preventDefault();

			if (!this.validateForm()) {
				return;
			}

			this.setLoadingState(true);
			this.hideMessages();

			try {
				const formData = new FormData(this.form);
				const email = formData.get('email') as string;

				const response = await fetch('/api/newsletter/subscribe', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ email }),
				});

				const result = await response.json();

				if (response.ok && result.success) {
					this.showSuccess();
					this.form.reset();
				} else {
					this.showError(result.error || 'Ha ocurrido un error inesperado.');
				}
			} catch (error) {
				this.showError('Error de conexión. Por favor, verifica tu internet e inténtalo de nuevo.');
			} finally {
				this.setLoadingState(false);
			}
		}

		private validateForm(): boolean {
			const email = this.emailInput.value.trim();
			const termsAccepted = this.termsInput.checked;

			if (!email) {
				this.showError('Por favor, ingresa tu correo electrónico.');
				this.emailInput.focus();
				return false;
			}

			if (!this.isValidEmail(email)) {
				this.showError('Por favor, ingresa un correo electrónico válido.');
				this.emailInput.focus();
				return false;
			}

			if (!termsAccepted) {
				this.showError('Debes aceptar la política de privacidad para continuar.');
				this.termsInput.focus();
				return false;
			}

			return true;
		}

		private isValidEmail(email: string): boolean {
			const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
			return emailRegex.test(email);
		}

		private setLoadingState(loading: boolean) {
			this.submitButton.disabled = loading;
			
			if (loading) {
				this.submitText.textContent = 'Suscribiendo...';
				this.submitIcon.style.display = 'none';
			} else {
				this.submitText.textContent = 'Suscribirme';
				this.submitIcon.style.display = 'inline';
			}
		}

		private showSuccess() {
			this.formMessage.classList.remove('hidden');
			this.successMessage.classList.remove('hidden');
			this.errorMessage.classList.add('hidden');
		}

		private showError(message: string) {
			this.errorText.textContent = message;
			this.formMessage.classList.remove('hidden');
			this.errorMessage.classList.remove('hidden');
			this.successMessage.classList.add('hidden');
		}

		private hideMessages() {
			this.formMessage.classList.add('hidden');
			this.successMessage.classList.add('hidden');
			this.errorMessage.classList.add('hidden');
		}
	}

	customElements.define('newsletter-subscription', NewsletterSubscription);
</script>

<style>
	newsletter-subscription {
		display: block;
	}

	/* Custom checkbox styling to match the theme */
	input[type="checkbox"] {
		appearance: none;
		background-color: theme('colors.bgColor');
		border: 1px solid theme('colors.color.400');
		border-radius: 0.25rem;
		width: 1rem;
		height: 1rem;
		position: relative;
		cursor: pointer;
		flex-shrink: 0;
	}

	input[type="checkbox"]:checked {
		background-color: theme('colors.accent-two');
		border-color: theme('colors.accent-two');
	}

	input[type="checkbox"]:checked::after {
		content: '';
		position: absolute;
		left: 50%;
		top: 50%;
		transform: translate(-50%, -50%) rotate(45deg);
		width: 0.375rem;
		height: 0.625rem;
		border: solid theme('colors.bgColor');
		border-width: 0 2px 2px 0;
	}

	input[type="checkbox"]:focus {
		outline: 2px solid theme('colors.accent-two');
		outline-offset: 2px;
	}
</style>